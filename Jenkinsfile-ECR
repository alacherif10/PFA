@Library('My-Shared-Library') _
pipeline {
  agent any
  parameters {
    choice(name :'action', choices:'create\ndelete', description: 'choose create\ndelete')
    string(name:'aws_account_id',description:"AWS Account ID", defaultValue:'454709238396')
    string(name:'region',description:"region of ECR", defaultValue:'us-east-1')
    string(name:'ImageName',description:"name of the docker build", defaultValue:'atm-app')
    string(name:'ImageTag',description:"Tag of the docker build", defaultValue:'v1')
    string(name:'ECR_REPO_NAME',description:"name of the ECR", defaultValue:'souhailcherif')
  }
  environment{
    ACCESS_KEY = credentials('AWS_SECRET_KEY_ID')
    SECRET_KEY = credentials('AWS_ACCESS_KEY_ID')
  }
  
  stages {
    
    stage('Git checkout') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          gitCheckout(
          branch : "main",
          url :"https://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@github.com/soucherif/ATM-Machine.git"
          )
        }
        
      }
    }
    /*stage('run Selenium test') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          seleniumTest()
        }
        
      }
    }*/
    stage('Unit Test Maven') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          mvnTest()
        
        }
        
      }
    }
    stage('Integration Test Maven') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          mvnIntegrationTest()
        
        }
        
      }
    }
    stage('Static Code Analysis : SonarQube') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          def SonarQubecredentialsId = 'mytoken'
          statiCodeAnalysis(SonarQubecredentialsId)
        
        }
        
      }
    }
    stage('Quality Gate Status check : SonarQube') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          def SonarQubecredentialsId = 'mytoken'
          QualityGateStatus(SonarQubecredentialsId)
        
        }
        
      }
    }
    stage('Maven Build : maven') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          mvnBuild()
        
        }
        
      }
    }
    stage('Docker Image Build : ECR ') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          dockerBuild( "${params.ImageName}","${params.ImageTag}","${params.aws_account_id}","${params.region}","${params.ECR_REPO_NAME}")
        
        }
        
      }
    }
    stage('Docker Image Scan : Trivy') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          dockerImageScan("${params.aws_account_id}","${params.region}", "${params.ECR_REPO_NAME}")
        
        }
        
      }
    }
    
      
    stage('Docker Image Push : ECR') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          dockerImagePush("${params.aws_account_id}","${params.region}", "${params.ECR_REPO_NAME}","${params.ImageName}","${params.ImageTag}")
        
        }
        
      }
    }
    stage('Docker Image CleanUp : ECR') {
      when {
      expression{
        params.action == 'create'
      }
    }
      steps {
        script{
          dockerImageCleanup("${params.aws_account_id}","${params.region}", "${params.ECR_REPO_NAME}")
        
        }
        
      }
    }
    /*stage('deploy to kubernetes cluster'){
        steps{
            script{
              dir('kubernetes'){
                sh """ 
                kubectl apply -f deploiement.yaml
                """
ï¿¼
                  
              
}
              }
                
            }
        }
    }*/
    /*stage('create EKS cluster : Terraform'){
        steps{
            script{
              dir('eks_infrastructure'){
                sh """ 
                terraform init
                terraform plan
                terraform apply --auto-approve
                """
              }
                
            }
        }
    }
    stage('connect to EKS'){
        steps{
            script{
              sh """
              aws configure set aws_access_key_id $ACCESS_KEY
              aws configure set aws_secret_access_key $SECRET_KEY
              aws configure set region $region
              """
                
            }
        }*/
    

  }
}
